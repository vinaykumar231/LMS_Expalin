
ai toll for front end locofy

Step 1: Install Node.js and npm

node -v
npm -v

#######  using normal react #########
npx create-react-app my-first-react-app   ##command

cd my-first-react-app

Run code :- npm start

################## Using Vite create react project ##############

(1) npm create vite@latest my-first-vite-app
(2)Select a framework: React
(3)Select a variant: JavaScript
(4)cd my-first-vite-app
(5)npm install OR npm i
(6)npm run dev   # run code 

###################### talwind css steup #########################

fist go talwind ccs official website than  click on  framework guide selcet vite  thna 

npm create vite@latest my-project -- --template react
cd my-project

npm install -D tailwindcss postcss autoprefixer
npx tailwindcss init -p

talwind config.js

/** @type {import('tailwindcss').Config} */
export default {
  content: [
    "./index.html",
    "./src/**/*.{js,ts,jsx,tsx}",
  ],
  theme: {
    extend: {},
  },
  plugins: [],
}

index.css
@tailwind base;
@tailwind components;
@tailwind utilities;

npm run dev ####code run


######################################## get api intgration in React ###################

import React, { useEffect, useState } from "react";
import Topbar from "components/Topbar";
import { useAuthContext } from "hooks/useAuthContext";
import axios from "helper/axios";

const UserDashboard = () => {
  const { user } = useAuthContext();
  const [activeTab, setActiveTab] = useState(null);
  const [courseData, setCourseData] = useState([]);

  // Fetch course data from the API
  const getCourseData = async () => {
    try {
      const response = await axios.get("api/course_active/enlrolled_course", {
        headers: { Authorization: `Bearer ${user.token}` },
      });
      setCourseData(response.data);
    } catch (error) {
      console.error("Failed to fetch course data:", error);
    }
  };

  // Fetch the course data when the component mounts
  useEffect(() => {
    getCourseData();
  }, []);

  return (
    <>
      <Topbar heading="Dashboard" />
      <div className="p-4 sm:p-7 flex flex-wrap">
        {courseData.map((course, index) => (
          <div key={index} className="w-full mb-6">
            <div
              className={`flex items-center justify-between p-4 w-full bg-white rounded-lg shadow-md cursor-pointer ${
                index === activeTab ? "border-2 border-gray-300" : "border"
              }`}
              onClick={() => setActiveTab(index === activeTab ? null : index)}
            >
              <div className="flex items-center">
                <div className="w-10 h-10 bg-gray-300 rounded-md"></div>
                <div className="ml-5">
                  <span className="font-semibold">{course.course_info.course_name}</span>
                  <span className="block text-gray-600 text-sm">
                    {course.course_info.subject_name} - {course.course_info.standard_name}
                  </span>
                </div>
              </div>
              <div className="text-gray-400">...</div>
            </div>

            {index === activeTab && (
              <div className="mt-4 p-4 bg-gray-100 rounded-lg">
                <h3 className="font-semibold">Module: {course.course_info.module_name}</h3>
                <div className="font-medium">Lessons:</div>
                {course.lessons.map((lesson, lessonIndex) => (
                  <div key={lessonIndex} className="p-3 mt-3 bg-white rounded shadow">
                    <h5>{lesson.title}</h5>
                    <p className="text-sm text-gray-600">{lesson.content_info.description}</p>
                    {lesson.content_info.content_path.map((path, pathIndex) => (
                      <img key={pathIndex} src={path} alt={`Lesson content ${lesson.title}`} className="mt-2 rounded"/>
                    ))}
                  </div>
                ))}
              </div>
            )}
          </div>
        ))}
      </div>
    </>
  );
};

export default UserDashboard;


#################### post api intgration in recat  ################################


import React, { useState } from 'react';
import axios from '../helper/axios';
import { Link, useNavigate } from 'react-router-dom';
import Swal from "sweetalert2";

const AddEmployeeForm = () => {
  const [formData, setFormData] = useState({
    name: '',
    email: '',
    department: '',
    position_name: '',
    primary_number: '',
    primary_email_id: '',
    current_address: '',
    permanent_address: '',
    education_level: '',
    institution: '',
    specialization: '',
    field_of_study: '',
    year_of_passing: '',
    percentage: '',
    emergency_contact_name: '',
    emergency_relation: '',
    emergency_contact_number: '',
    dependent_name: '',
    dependent_relation: '',
    dependent_date_of_birth: '',
    skill: '',
    certification: '',
    profile_pic: null,
    documents: null,
    languages: '',
  });

  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');
  const navigate = useNavigate();

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const handleFileChange = (e) => {
    const { name, files } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: files[0]
    }));
  };

  const token = localStorage.getItem('token');

  const handleSubmit = async (e) => {
    e.preventDefault();
    setIsLoading(true);
    setError('');
    setSuccess('');

    try {
      const data = new FormData();
      Object.entries(formData).forEach(([key, value]) => {
        if (value !== null) {
          data.append(key, value);
        }
      });

      await axios.post('/employee/add_employee', data, {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'multipart/form-data',
        },
      });
      Swal.fire({
        title: "Employee profile created successfully!",
        icon: "success",
      })

      setSuccess('Employee profile created successfully');
      navigate('/EmployeeList');
      setFormData({
        name: '',
        email: '',
        department: '',
        position_name: '',
        primary_number: '',
        primary_email_id: '',
        current_address: '',
        permanent_address: '',
        education_level: '',
        institution: '',
        specialization: '',
        field_of_study: '',
        year_of_passing: '',
        percentage: '',
        emergency_contact_name: '',
        emergency_relation: '',
        emergency_contact_number: '',
        dependent_name: '',
        dependent_relation: '',
        dependent_date_of_birth: '',
        skill: '',
        certification: '',
        profile_pic: null,
        documents: null,
        languages: '',
      });
    } catch (error) {
      setError(`Error creating employee profile: ${error.response?.data?.detail || error.message}`);
    } finally {
      setIsLoading(false);
    }
  };

  const handleClose = () => {
    navigate('/EmployeeList'); // Change this to your desired close action
  };

  return (
    <div className="min-h-screen bg-gray-200 py-6 flex flex-col justify-center sm:py-12">
      <div className="relative py-3 sm:max-w-xl md:max-w-4xl lg:max-w-5xl xl:max-w-6xl mx-auto">
        <div className="absolute inset-0 bg-gradient-to-r from-blue-300 to-blue-600 shadow-lg transform -skew-y-6 sm:skew-y-0 sm:-rotate-6 sm:rounded-3xl"></div>
        <div className="relative px-4 py-10 bg-white shadow-lg sm:rounded-3xl sm:p-20">
          {/* Close Button */}
          <button
            type="button"
            className="absolute top-0 right-0 mt-4 mr-4 text-gray-500 hover:text-gray-800"
            onClick={handleClose}
          >
            <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M6 18L18 6M6 6l12 12" />
            </svg>
          </button>

          <form onSubmit={handleSubmit} className="mx-auto">
            <h2 className="text-3xl font-bold mb-8 text-center text-gray-800">Add New Employee</h2>

            {error && <div className="mb-6 p-3 bg-red-100 text-red-700 rounded">{error}</div>}
            {success && <div className="mb-6 p-3 bg-green-100 text-green-700 rounded">{success}</div>}

            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              <div>
                <label className="block text-sm font-medium text-gray-700">Name:</label>
                <input
                  type="text"
                  name="name"
                  value={formData.name}
                  onChange={handleInputChange}
                  className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                  required
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700">Email:</label>
                <input
                  type="email"
                  name="email"
                  value={formData.email}
                  onChange={handleInputChange}
                  className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                  required
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700">Department:</label>
                <input
                  type="text"
                  name="department"
                  value={formData.department}
                  onChange={handleInputChange}
                  className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                  required
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700">Position Name:</label>
                <input
                  type="text"
                  name="position_name"
                  value={formData.position_name}
                  onChange={handleInputChange}
                  className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                  required
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700">Primary Number:</label>
                <input
                  type="text"
                  name="primary_number"
                  value={formData.primary_number}
                  onChange={handleInputChange}
                  className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                  required
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700">Primary Email ID:</label>
                <input
                  type="email"
                  name="primary_email_id"
                  value={formData.primary_email_id}
                  onChange={handleInputChange}
                  className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                  required
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700">Current Address:</label>
                <input
                  type="text"
                  name="current_address"
                  value={formData.current_address}
                  onChange={handleInputChange}
                  className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                  required
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700">Permanent Address:</label>
                <input
                  type="text"
                  name="permanent_address"
                  value={formData.permanent_address}
                  onChange={handleInputChange}
                  className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                  required
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700">Education Level:</label>
                <input
                  type="text"
                  name="education_level"
                  value={formData.education_level}
                  onChange={handleInputChange}
                  className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                  required
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700">Institution:</label>
                <input
                  type="text"
                  name="institution"
                  value={formData.institution}
                  onChange={handleInputChange}
                  className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                  required
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700">Specialization:</label>
                <input
                  type="text"
                  name="specialization"
                  value={formData.specialization}
                  onChange={handleInputChange}
                  className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                  required
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700">Field of Study:</label>
                <input
                  type="text"
                  name="field_of_study"
                  value={formData.field_of_study}
                  onChange={handleInputChange}
                  className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                  required
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700">Year of Passing:</label>
                <input
                  type="number"
                  name="year_of_passing"
                  value={formData.year_of_passing}
                  onChange={handleInputChange}
                  className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                  required
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700">Percentage:</label>
                <input
                  type="number"
                  name="percentage"
                  value={formData.percentage}
                  onChange={handleInputChange}
                  className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                  step="0.01"
                  required
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700">Emergency Contact Name:</label>
                <input
                  type="text"
                  name="emergency_contact_name"
                  value={formData.emergency_contact_name}
                  onChange={handleInputChange}
                  className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                  required
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700">Emergency Relation:</label>
                <input
                  type="text"
                  name="emergency_relation"
                  value={formData.emergency_relation}
                  onChange={handleInputChange}
                  className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                  required
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700">Emergency Contact Number:</label>
                <input
                  type="text"
                  name="emergency_contact_number"
                  value={formData.emergency_contact_number}
                  onChange={handleInputChange}
                  className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                  required
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700">Dependent Name:</label>
                <input
                  type="text"
                  name="dependent_name"
                  value={formData.dependent_name}
                  onChange={handleInputChange}
                  className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                  required
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700">Dependent Relation:</label>
                <input
                  type="text"
                  name="dependent_relation"
                  value={formData.dependent_relation}
                  onChange={handleInputChange}
                  className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700">Dependent Date of Birth:</label>
                <input
                  type="date"
                  name="dependent_date_of_birth"
                  value={formData.dependent_date_of_birth}
                  onChange={handleInputChange}
                  className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700">Skill:</label>
                <input
                  type="text"
                  name="skill"
                  value={formData.skill}
                  onChange={handleInputChange}
                  className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                  required
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700">Certification:</label>
                <input
                  type="text"
                  name="certification"
                  value={formData.certification}
                  onChange={handleInputChange}
                  className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                  required
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700">Languages Spoken:</label>
                <input
                  type="text"
                  name="languages"
                  value={formData.languages}
                  onChange={handleInputChange}
                  className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                  required
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700">Profile Picture:</label>
                <input
                  type="file"
                  name="profile_pic"
                  onChange={handleFileChange}
                  className="mt-1 block w-full text-sm text-gray-900 border border-gray-300 rounded-md cursor-pointer focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700">Documents:</label>
                <input
                  type="file"
                  name="documents"
                  onChange={handleFileChange}
                  className="mt-1 block w-full text-sm text-gray-900 border border-gray-300 rounded-md cursor-pointer focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                />
              </div>
            </div>

            <div className="mt-8">
              <button
                type="submit"
                disabled={isLoading}
                className={`w-full bg-blue-500 text-white py-3 px-4 rounded-md text-lg font-semibold hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50 transition duration-200 ${isLoading ? 'opacity-50 cursor-not-allowed' : ''
                  }`}
              >
                {isLoading ? 'Creating Profile...' : 'Create Employee Profile'}
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  );
};

export default AddEmployeeForm;

#################################### delete api Intgration ############################

import React, { useEffect, useState } from "react";
import axios from "helper/axios";
import { useAuthContext } from "hooks/useAuthContext";
import Swal from "sweetalert2";
import Loader from "components/Loader";
import { Helmet } from "react-helmet";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import DownloadIcon from "/images/download.png";
import EyeIcn from "/images/eye.png";
import DelIcon from "/images/delete.png";

const AdminViewContent = () => {
  const [loading, setLoading] = useState(false);
  const [courseData, setCourseData] = useState<any>(null);
  const [detailId, setDetailId] = useState(null);
  const { user }: any = useAuthContext();

  useEffect(() => {
    const queryParams = new URLSearchParams(location.search);
    const detailId = queryParams.get("detailId");

    if (detailId) setDetailId(detailId);

    if (detailId) {
      getCourseDetails(detailId);
    }
  }, []);

  const getCourseDetails = async (detailId: any) => {
    try {
      const response = await axios.get(`/api/course_contents/${detailId}`, {
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${user.token}`,
        },
      });
      setCourseData(response.data);
    } catch (error) {
      // console.log(error);
    }
  };

  const deleteContent = async (id: any) => {
    try {
      const result = await Swal.fire({
        title: "Are you sure?",
        text: "You won't be able to revert this!",
        icon: "warning",
        showCancelButton: true,
        confirmButtonColor: "#3085d6",
        cancelButtonColor: "#d33",
        confirmButtonText: "Yes, delete it!",
      });

      if (result.isConfirmed) {
        const response = await axios.delete(`/api/content_lesson/${id}`, {
          headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${user.token}`,
          },
        });

        if (response.status === 200) {
          Swal.fire("Deleted!", "Your content has been deleted.", "success");
          // Refresh the course details after deletion
          getCourseDetails(detailId);
        } else {
          throw new Error("Failed to delete Content");
        }
      }
    } catch (error) {
      // console.log(error);
    }
  };

  return (
    <>
      <Helmet>
        <title>View Content</title>
      </Helmet>
      {loading ? (
        <Loader />
      ) : (
        <>
          <div className="container my-10">
            <div className="my-9 text-center text-[30px]">
              <h3>Course Details</h3>
            </div>
            {courseData && (
              <div className="mb-16 flex justify-center ">
                <table className="w-[50%]   shadow-xl rounded-lg">
                  <thead>
                    <tr className=" text-white">
                      <th className="p-4 bg-gradient-to-r from-[#fa9960] to-[#f6753b] ">
                        Course Name
                      </th>
                      <th className="p-4 bg-gradient-to-r from-[#fa9960] to-[#f6753b] ">
                        Subject Name
                      </th>
                      <th className="p-4 bg-gradient-to-r from-[#fa9960] to-[#f6753b] ">
                        Standard Name
                      </th>
                      <th className="p-4 bg-gradient-to-r from-[#fa9960] to-[#f6753b] ">
                        Module Name
                      </th>
                    </tr>
                  </thead>
                  <tbody>
                    <tr className="bg-gradient-to-r from-gray-300 to-gray-500 text-gray-700">
                      <td className="p-4 bg-gradient-to-r from-gray-400 to-gray-500">
                        {courseData.course_name}
                      </td>
                      <td className="p-4 bg-gradient-to-r from-gray-400 to-gray-500">
                        {courseData.subject_name}
                      </td>
                      <td className="p-4 bg-gradient-to-r from-gray-400 to-gray-500">
                        {courseData.standard_name}
                      </td>
                      <td className="p-4 bg-gradient-to-r from-gray-400 to-gray-500">
                        {courseData.module_name}
                      </td>
                    </tr>
                  </tbody>
                </table>
              </div>
            )}
            <div className="px-[200px]">
              {courseData && (
                <Table className="border-[1px] px-[100px] ">
                  <TableHeader className="">
                    <TableRow className=" bg-[#f6753b] hover:bg-[#f6753b] text-black-900 font-bold">
                      <TableHead className="text-black-900 font-bold ">
                        Lesson
                      </TableHead>
                      <TableHead className="text-center text-black-900 font-bold">
                        Descripton
                      </TableHead>
                      <TableHead className="text-right text-black-900 font-bold"></TableHead>
                    </TableRow>
                  </TableHeader>
                  <TableBody>
                    {courseData.lessons.map((lesson) => (
                      <TableRow key={lesson.lesson_id}>
                        <TableCell className="">{lesson.title}</TableCell>
                        <TableCell className="text-center">
                          {lesson.content_info.map((content) => (
                            <div key={content.id}>{content.description}</div>
                          ))}
                        </TableCell>
                        <TableCell className="text-right">
                          {lesson.content_info.map(
                            (content: any, contentIndex: any) => (
                              <div key={content.id}>
                                {content.content_path.map(
                                  (path: any, pathIndex: any) => (
                                    <div
                                      key={pathIndex}
                                      className="flex justify-end"
                                    >
                                      <a
                                        href={encodeURI(path)}
                                        target="_blank"
                                        rel="noopener noreferrer"
                                        className="mr-2"
                                      >
                                        <img
                                          src={EyeIcn}
                                          alt="eyeimg"
                                          className="w-[24px] h-[24px] m-1"
                                        />
                                      </a>
                                      <div
                                        key={pathIndex}
                                        className="flex justify-end relative"
                                      >
                                        <a
                                          href={encodeURI(path)}
                                          onClick={(e) => {
                                            e.preventDefault();
                                            fetch(encodeURI(path))
                                              .then((response) =>
                                                response.blob()
                                              )
                                              .then((blob) => {
                                                const url =
                                                  window.URL.createObjectURL(
                                                    blob
                                                  );
                                                const a =
                                                  document.createElement("a");
                                                a.style.display = "none";
                                                a.href = url;
                                                a.download = `file_${
                                                  contentIndex + 1
                                                }`;
                                                document.body.appendChild(a);
                                                a.click();
                                                window.URL.revokeObjectURL(url);
                                              });
                                          }}
                                          className="ml-2 relative"
                                        >
                                          <img
                                            src={DownloadIcon}
                                            role="button"
                                            tabIndex={-3}
                                            alt="downloadIcon"
                                            className="w-[24px] h-[24px] m-1"
                                          />
                                        </a>
                                        {/* <button
                                          onClick={() =>
                                            deleteContent(lesson.lesson_id)
                                          }
                                        >
                                          <img
                                            src={DelIcon}
                                            alt="deleteIcon"
                                            className="w-[24px] h-[24px] m-1 ml-5 cursor-pointer"
                                          />
                                        </button> */}
                                      </div>
                                    </div>
                                  )
                                )}
                              </div>
                            )
                          )}
                        </TableCell>
                      </TableRow>
                    ))}
                  </TableBody>
                </Table>
              )}
            </div>
          </div>
        </>
      )}
    </>
  );
};

export default AdminViewContent;


################################## using get all content api set only content od for further use for post api ####################

import React, { useState, useEffect } from 'react';
import axios from 'axios';

const AttendanceManager = () => {
  const [students, setStudents] = useState([]);
  const [selectedStudent, setSelectedStudent] = useState(null);
  const [attendance, setAttendance] = useState([]);
  const [status, setStatus] = useState(''); // To store attendance status (Present/Absent)

  // Fetch all student details
  useEffect(() => {
    axios.get('/api/students')
      .then(response => {
        setStudents(response.data); // Assuming the response contains a list of students
      })
      .catch(error => console.error('Error fetching students:', error));
  }, []);

  // Fetch attendance for the selected student
  const fetchAttendance = (studentId) => {
    axios.get(`/api/attendance/${studentId}`)
      .then(response => {
        setAttendance(response.data); // Assuming the response contains attendance details
        setSelectedStudent(studentId); // Set the selected student
      })
      .catch(error => console.error('Error fetching attendance:', error));
  };

  // Post attendance data for the selected student
  const submitAttendance = () => {
    axios.post('/api/attendance', {
      student_id: selectedStudent,
      status: status,
    })
      .then(response => {
        console.log('Attendance submitted successfully', response);
        // Refresh attendance after submission
        fetchAttendance(selectedStudent);
      })
      .catch(error => console.error('Error submitting attendance:', error));
  };

  return (
    <div>
      <h1>Attendance Manager</h1>

      {/* Select a student */}
      <div>
        <h2>Select a Student:</h2>
        <ul>
          {students.map((student) => (
            <li key={student.id}>
              {student.name}
              <button onClick={() => fetchAttendance(student.id)}>
                View Attendance
              </button>
            </li>
          ))}
        </ul>
      </div>

      {/* Show selected student’s attendance */}
      {selectedStudent && (
        <div>
          <h2>Attendance for {students.find(s => s.id === selectedStudent)?.name}</h2>
          <ul>
            {attendance.map((entry, index) => (
              <li key={index}>
                {entry.date}: {entry.status}
              </li>
            ))}
          </ul>

          {/* Submit new attendance */}
          <h3>Submit Attendance:</h3>
          <select onChange={(e) => setStatus(e.target.value)} value={status}>
            <option value="">Select Status</option>
            <option value="Present">Present</option>
            <option value="Absent">Absent</option>
          </select>
          <button onClick={submitAttendance}>Submit Attendance</button>
        </div>
      )}
    </div>
  );
};

export default AttendanceManager;


##################################### dynamic filter #############################################

import React, { useState } from 'react';

const CourseAdmission = () => {
  // Dummy data structure for courses, standards, and subjects
  const courseDetails = [
    {
      courseId: 1,
      courseName: "Mathematics",
      standards: [
        { standardId: 101, standardName: "10th Grade", subjects: ["Algebra", "Geometry"] },
        { standardId: 102, standardName: "9th Grade", subjects: ["Algebra", "Statistics"] }
      ]
    },
    {
      courseId: 2,
      courseName: "Science",
      standards: [
        { standardId: 201, standardName: "10th Grade", subjects: ["Physics", "Chemistry"] },
        { standardId: 202, standardName: "9th Grade", subjects: ["Biology", "Earth Science"] }
      ]
    }
  ];

  // State to store selected course, standard, and subject
  const [selectedCourse, setSelectedCourse] = useState(null);
  const [selectedStandard, setSelectedStandard] = useState(null);
  const [selectedSubject, setSelectedSubject] = useState(null);

  // Handle course selection with find method
  const handleSelectCourse = (courseId) => {
    const foundCourse = courseDetails.find(course => course.courseId === courseId);
    setSelectedCourse(foundCourse);  // Set selected course
    setSelectedStandard(null);       // Reset standard and subject when a new course is selected
    setSelectedSubject(null);
  };

  // Handle standard selection with find method
  const handleSelectStandard = (standardId) => {
    if (selectedCourse) {
      const foundStandard = selectedCourse.standards.find(standard => standard.standardId === standardId);
      setSelectedStandard(foundStandard);  // Set selected standard
      setSelectedSubject(null);            // Reset subject when a new standard is selected
    }
  };

  // Handle subject selection
  const handleSelectSubject = (subject) => {
    setSelectedSubject(subject);  // Set selected subject
  };

  // Handle student admission
  const handleAdmitStudent = () => {
    if (selectedCourse && selectedStandard && selectedSubject) {
      console.log("Admitting student to:", {
        course: selectedCourse.courseName,
        standard: selectedStandard.standardName,
        subject: selectedSubject,
      });
      // Perform your API request here (e.g., with fetch or axios)
    } else {
      console.log("Please complete the selection.");
    }
  };

  return (
    <div className="p-5">
      <h1 className="text-xl font-bold mb-4">Course Admission</h1>

      {/* Course Selection */}
      <h2 className="text-lg mb-2">Select Course</h2>
      <ul className="mb-4">
        {courseDetails.map((course) => (
          <li key={course.courseId} className="mb-2">
            <button
              className={`px-4 py-2 rounded ${selectedCourse?.courseId === course.courseId ? 'bg-green-500 text-white' : 'bg-blue-500 text-white'}`}
              onClick={() => handleSelectCourse(course.courseId)}
            >
              {course.courseName}
            </button>
          </li>
        ))}
      </ul>

      {/* Standard Selection (Filtered by Course) */}
      {selectedCourse && (
        <>
          <h2 className="text-lg mb-2">Select Standard</h2>
          <ul className="mb-4">
            {selectedCourse.standards.map((standard) => (
              <li key={standard.standardId} className="mb-2">
                <button
                  className={`px-4 py-2 rounded ${selectedStandard?.standardId === standard.standardId ? 'bg-green-500 text-white' : 'bg-blue-500 text-white'}`}
                  onClick={() => handleSelectStandard(standard.standardId)}
                >
                  {standard.standardName}
                </button>
              </li>
            ))}
          </ul>
        </>
      )}

      {/* Subject Selection (Filtered by Standard) */}
      {selectedStandard && (
        <>
          <h2 className="text-lg mb-2">Select Subject</h2>
          <ul className="mb-4">
            {selectedStandard.subjects.map((subject, index) => (
              <li key={index} className="mb-2">
                <button
                  className={`px-4 py-2 rounded ${selectedSubject === subject ? 'bg-green-500 text-white' : 'bg-blue-500 text-white'}`}
                  onClick={() => handleSelectSubject(subject)}
                >
                  {subject}
                </button>
              </li>
            ))}
          </ul>
        </>
      )}

      {/* Admit Student Button */}
      <button
        className="bg-green-500 text-white px-6 py-2 rounded"
        onClick={handleAdmitStudent}
      >
        Admit Student
      </button>
    </div>
  );
};

export default CourseAdmission;


############### for ui use sad cn  ##############################

 import {
    Table,
    TableBody,
    TableCell,
    TableHead,
    TableHeader,
    TableRow,
} from "@/components/ui/table";
import Topbar from "components/Topbar";
import { Button } from "@/components/ui/button";
import {
    Dialog,
    DialogContent,
    DialogFooter,
    DialogHeader,
} from "@/components/ui/dialog";
import { DialogTrigger } from "@radix-ui/react-dialog";
import Swal from "sweetalert2";
import { Label } from "@/components/ui/label";

############### for any symbol use lucide react   ##############################

for any symbol use lucid react symbol :- import { Users, User, ClipboardList, DollarSign, LogOut, BookOpen } from 'lucide-react'; // Import icons








