Certainly! I'll provide a comprehensive list of key SQLAlchemy functions and keywords used for querying and manipulating data in Python. These are commonly used with the SQLAlchemy ORM (Object Relational Mapper).

Query Construction:

query(): Starts a query
select(): Constructs a SELECT statement (SQLAlchemy 2.0+)
filter(): Applies WHERE clauses
filter_by(): Applies WHERE clauses with keyword arguments
order_by(): Orders results
group_by(): Groups results
having(): Applies HAVING clause after GROUP BY
limit(): Limits number of results
offset(): Skips a number of results
distinct(): Removes duplicate rows


Joins:

join(): Performs an inner join
outerjoin(): Performs a left outer join
joinedload(): Eagerly loads related objects
subqueryload(): Loads related objects using a subquery
selectinload(): Loads related objects using SELECT IN
lazyload(): Loads related objects lazily (default behavior)


Aggregations and Functions:

func: Namespace for SQL functions (e.g., func.count(), func.sum(), func.avg())
label(): Gives an expression a name
case(): Constructs a CASE statement


Logical Operators:

and_(): Combines conditions with AND
or_(): Combines conditions with OR
not_(): Negates a condition


Comparison Operators:

==, !=, <, >, <=, >=: Standard comparisons
in_(): Checks if a value is in a list
between(): Checks if a value is between two others
like(): Pattern matching with LIKE
ilike(): Case-insensitive LIKE


Subqueries:

subquery(): Creates a subquery
alias(): Creates an alias for a table or subquery


Set Operations:

union(): Combines results of two queries
union_all(): Combines results without removing duplicates
intersect(): Returns common results between queries
except_(): Returns results in first query but not in second


Data Manipulation:

insert(): Inserts new records
update(): Updates existing records
delete(): Deletes records


Result Retrieval:

all(): Returns all results as a list
first(): Returns the first result
one(): Returns exactly one result (raises an error if not exactly one)
scalar(): Returns a single scalar value
count(): Returns the count of results


Relationship Loading:

with_parent(): Queries for objects related to a specific parent
contains_eager(): Specifies how to load a related object


Raw SQL:

text(): Allows writing raw SQL strings
bindparam(): Creates a bound parameter in raw SQL


Session Operations:

add(): Adds an object to the session
add_all(): Adds multiple objects to the session
delete(): Marks an object for deletion
commit(): Commits the current transaction
rollback(): Rolls back the current transaction
flush(): Flushes all pending changes to the database

################## difference between join and joinedload #####################################

### join is basically use for amemory effecency means when we search apecific data than not need searchh all adatabase table we ony search sepecifi table and search ir lik this ##
course_content = db.query(Course_content).join(
        Course,
        Course.id == Course_content.course_id
    ).join(
        TeacherCourse,
        and_(
            TeacherCourse.course_id == Course.id,
            TeacherCourse.is_assign_course == True
        )
    ).filter(Course_content.id == course_content_id).first()
in above exaple we want insert in upload data based on conteend _id but content_id avilable in three table that's we need to search content id in 3 three for serach we need to use join

### joinload is bassically used for connect all three table to eache other than we can aaces data from all 3 three table by using on object  ##
course = db.query(Course).options(
        joinedload(Course.standards)
        .joinedload(Standard.subject)  # Changed from 'subject' to 'subjects'
        .joinedload(Subject.modules)
    ).filter(Course.id == course_id).first()

in above example  course is a object by using tah we cann acess all data which are availabe in all table which are joined