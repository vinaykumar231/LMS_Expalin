To connect **Nginx, FastAPI, Database (MySQL/PostgreSQL), Models, and Schemas** together in a **production-ready setup**, follow these steps:

---

# **📌 Step-by-Step Deployment of a Complete FastAPI Project on AWS EC2 Using Nginx**
✅ **What We Will Cover:**  
1️⃣ **FastAPI Project Structure**  
2️⃣ **Database Connection (MySQL/PostgreSQL)**  
3️⃣ **Models & Schemas**  
4️⃣ **FastAPI API Endpoints**  
5️⃣ **Configuring Uvicorn & Gunicorn**  
6️⃣ **Setting Up Nginx as a Reverse Proxy**  
7️⃣ **Connecting Everything for Deployment**  

---

## **1️⃣ FastAPI Project Structure**
Before deploying, let's define a **clean project structure**:

```
/home/ubuntu/myproject/
│── app/
│   ├── main.py              # FastAPI entry point
│   ├── database.py          # Database connection
│   ├── models.py            # SQLAlchemy models
│   ├── schemas.py           # Pydantic schemas
│   ├── routes/
│   │   ├── users.py         # User routes
│   │   ├── products.py      # Product routes
│   ├── static/              # Static files (CSS, JS, images)
│   │   ├── images/
│   │   ├── styles/
│   │   ├── scripts/
│── nginx.conf               # Nginx configuration
│── gunicorn_conf.py         # Gunicorn configuration
│── requirements.txt         # Python dependencies
│── .env                     # Environment variables
```

---

## **2️⃣ Database Connection (`database.py`)**
First, **connect FastAPI to a database** (MySQL or PostgreSQL).

📌 **Create `database.py`:**
```python
from sqlalchemy import create_engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
import os

# Load environment variables
DB_USER = os.getenv("DB_USER", "root")
DB_PASS = os.getenv("DB_PASS", "password")
DB_HOST = os.getenv("DB_HOST", "localhost")
DB_NAME = os.getenv("DB_NAME", "mydatabase")

DATABASE_URL = f"mysql+pymysql://{DB_USER}:{DB_PASS}@{DB_HOST}/{DB_NAME}"

# Create SQLAlchemy engine
engine = create_engine(DATABASE_URL)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

Base = declarative_base()

# Dependency to get DB session
def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()
```

✅ **Now, FastAPI is connected to MySQL/PostgreSQL.**

---

## **3️⃣ Models (`models.py`)**
📌 **Define a User Model in `models.py`:**
```python
from sqlalchemy import Column, Integer, String
from .database import Base

class User(Base):
    __tablename__ = "users"

    id = Column(Integer, primary_key=True, index=True)
    name = Column(String(50), nullable=False)
    email = Column(String(100), unique=True, index=True, nullable=False)
    password = Column(String(255), nullable=False)
```

✅ **This defines a `users` table with `id, name, email, password`.**

---

## **4️⃣ Pydantic Schemas (`schemas.py`)**
📌 **Create `schemas.py` to validate API requests:**
```python
from pydantic import BaseModel, EmailStr

class UserCreate(BaseModel):
    name: str
    email: EmailStr
    password: str

class UserResponse(BaseModel):
    id: int
    name: str
    email: str

    class Config:
        from_attributes = True
```

✅ **This ensures proper validation when sending data to API endpoints.**

---

## **5️⃣ Create API Endpoints (`routes/users.py`)**
📌 **Create `users.py` inside `routes/`:**
```python
from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.orm import Session
from ..database import get_db
from ..models import User
from ..schemas import UserCreate, UserResponse
from passlib.context import CryptContext

router = APIRouter()

pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

@router.post("/register", response_model=UserResponse)
def register_user(user: UserCreate, db: Session = Depends(get_db)):
    hashed_password = pwd_context.hash(user.password)
    new_user = User(name=user.name, email=user.email, password=hashed_password)
    db.add(new_user)
    db.commit()
    db.refresh(new_user)
    return new_user

@router.get("/users/{user_id}", response_model=UserResponse)
def get_user(user_id: int, db: Session = Depends(get_db)):
    user = db.query(User).filter(User.id == user_id).first()
    if not user:
        raise HTTPException(status_code=404, detail="User not found")
    return user
```

✅ **Now, FastAPI has:**
- **`/register`** → Create a user  
- **`/users/{id}`** → Get user details  

---

## **6️⃣ Main FastAPI Entry (`main.py`)**
📌 **Create `main.py`:**
```python
from fastapi import FastAPI
from fastapi.staticfiles import StaticFiles
from .routes import users

app = FastAPI()

# Mount static files
app.mount("/static", StaticFiles(directory="static"), name="static")

# Include routes
app.include_router(users.router)

@app.get("/")
def root():
    return {"message": "FastAPI + Nginx Deployment Working!"}
```

✅ **This initializes FastAPI and mounts `users.py` routes.**

---

## **7️⃣ Configure Gunicorn (`gunicorn_conf.py`)**
📌 **Create `gunicorn_conf.py`:**
```python
workers = 4
bind = "0.0.0.0:8000"
worker_class = "uvicorn.workers.UvicornWorker"
```
✅ **Gunicorn will run FastAPI with 4 workers.**

---

## **8️⃣ Set Up Nginx Configuration (`nginx.conf`)**
📌 **Create `/etc/nginx/sites-available/fastapi`:**
```nginx
server {
    listen 80;
    server_name your-ec2-public-ip;

    location /static/ {
        alias /home/ubuntu/myproject/app/static/;
        autoindex on;
    }

    location / {
        proxy_pass http://127.0.0.1:8000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}
```

### **Enable Nginx Configuration:**
```bash
sudo ln -s /etc/nginx/sites-available/fastapi /etc/nginx/sites-enabled/
sudo nginx -t
sudo systemctl restart nginx
```

✅ **Now, Nginx serves FastAPI & static files.**

---

## **9️⃣ Run FastAPI in the Background**
### **Using Gunicorn + Uvicorn**
```bash
gunicorn -c gunicorn_conf.py app.main:app
```

✅ **FastAPI is now running on `http://your-ec2-public-ip/`.**

---

## **🔟 Final Testing**
📌 Open your browser & test your FastAPI APIs:

🔹 **Check API Root:**
```
http://your-ec2-public-ip/
```

🔹 **Register a User (POST Request):**
```
http://your-ec2-public-ip/register
```
Request Body:
```json
{
    "name": "John Doe",
    "email": "john@example.com",
    "password": "securepassword"
}
```

🔹 **Fetch User Details:**
```
http://your-ec2-public-ip/users/1
```

🔹 **Static File Access:**
```
http://your-ec2-public-ip/static/images/logo.png
```

---

## **✅ Summary**
🚀 **Now, everything is deployed & working:**
✔ **FastAPI** (Backend API)  
✔ **MySQL/PostgreSQL** (Database)  
✔ **Nginx** (Reverse Proxy)  
✔ **Gunicorn** (Process Manager)  
✔ **Static File Hosting**  

Let me know if you have any issues! 😊🚀