### **ðŸš€ Deploy FastAPI on AWS EC2 using Nginx & MobaXterm**  

This guide will take you **step by step** on how to **clone your FastAPI project, configure Nginx, set up a service, and serve static files** using **MobaXterm** on an **AWS EC2 Ubuntu instance**.

---

## **ðŸ”¹ Step 1: Connect to Your EC2 Instance via MobaXterm**  
1. Open **MobaXterm**.  
2. Click on **Session â†’ SSH**.  
3. Enter your **Public IP of EC2 instance** (e.g., `54.123.45.67`).  
4. Under **Advanced SSH settings**, add your **.pem key file** (from AWS).  
5. Click **OK** to connect.  

âœ… Now you're inside your Ubuntu EC2 instance.

---

## **ðŸ”¹ Step 2: Install Required Packages**
Run the following commands to install necessary packages:  
```bash
sudo apt update && sudo apt upgrade -y
sudo apt install git python3-pip python3-venv nginx -y
```
âœ… This installs **Git**, **Python**, and **Nginx**.

---

## **ðŸ”¹ Step 3: Clone Your FastAPI Project**
Move to the home directory and clone your project:
```bash
cd /home/ubuntu
git clone https://github.com/yourusername/your-fastapi-project.git
```
ðŸ‘‰ **Replace** `yourusername/your-fastapi-project` with your actual GitHub repo.  

Then, move inside the project:
```bash
cd your-fastapi-project
```

---

## **ðŸ”¹ Step 4: Set Up a Virtual Environment**
Create and activate a Python virtual environment:
```bash
python3 -m venv venv
source venv/bin/activate
```
âœ… This isolates project dependencies.

---

## **ðŸ”¹ Step 5: Install FastAPI & Uvicorn**
Install required dependencies:
```bash
pip install --upgrade pip
pip install -r requirements.txt
```
If `requirements.txt` does not exist, install manually:
```bash
pip install fastapi uvicorn gunicorn
```
âœ… This installs **FastAPI, Uvicorn, and Gunicorn**.

---

## **ðŸ”¹ Step 6: Run FastAPI Locally (Test)**
To check if FastAPI is working, run:
```bash
uvicorn main:app --host 0.0.0.0 --port 8000 --reload
```
âœ… Open **EC2 Public IP** in the browser:  
```
http://YOUR_EC2_PUBLIC_IP:8000/docs
```
If FastAPI loads, the setup is working!

---

## **ðŸ”¹ Step 7: Set Up Systemd Service for FastAPI**
Stop the running server (`Ctrl + C`) and create a systemd service file:
```bash
sudo nano /etc/systemd/system/fastapi.service
```
Paste the following:
```ini
[Unit]
Description=FastAPI Application
After=network.target

[Service]
User=ubuntu
WorkingDirectory=/home/ubuntu/your-fastapi-project
ExecStart=/home/ubuntu/your-fastapi-project/venv/bin/uvicorn main:app --host 127.0.0.1 --port 8000
Restart=always

[Install]
WantedBy=multi-user.target
```
ðŸ‘‰ **Save & exit:** `Ctrl + X`, then `Y`, then `Enter`.  

Enable and start the service:
```bash
sudo systemctl daemon-reload
sudo systemctl enable fastapi
sudo systemctl start fastapi
sudo systemctl status fastapi
```
âœ… Your FastAPI app is now running **in the background**.

---

## **ðŸ”¹ Step 8: Configure Nginx as a Reverse Proxy**
Open the Nginx config file:
```bash
sudo nano /etc/nginx/sites-available/fastapi
```
Paste this configuration:
```nginx
server {
    listen 80;
    server_name YOUR_EC2_PUBLIC_IP;

    location / {
        proxy_pass http://127.0.0.1:8000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    location /static/ {
        alias /home/ubuntu/your-fastapi-project/static/;
    }
}
```
ðŸ‘‰ **Replace** `YOUR_EC2_PUBLIC_IP` with your actual EC2 IP.  
ðŸ‘‰ **Save & exit:** `Ctrl + X`, then `Y`, then `Enter`.

Now, enable the configuration:
```bash
sudo ln -s /etc/nginx/sites-available/fastapi /etc/nginx/sites-enabled/
```
âœ… This links the config to **sites-enabled**.

---

## **ðŸ”¹ Step 9: Set File Permissions for Static Files**
Make sure Nginx can read the static files:
```bash
sudo chmod -R 755 /home/ubuntu/your-fastapi-project/static/
sudo chown -R www-data:www-data /home/ubuntu/your-fastapi-project/static/
```
âœ… This prevents **403 Forbidden errors**.

---

## **ðŸ”¹ Step 10: Restart Nginx & Allow Firewall**
Restart Nginx:
```bash
sudo systemctl restart nginx
sudo systemctl enable nginx
```
Allow traffic:
```bash
sudo ufw allow 'Nginx Full'
sudo ufw enable
sudo ufw status
```
âœ… Now, Nginx should serve FastAPI!

---

## **ðŸ”¹ Step 11: Test the Deployment**
Visit your **EC2 Public IP** in a browser:
```
http://YOUR_EC2_PUBLIC_IP/
```
If everything works, ðŸŽ‰ **Your FastAPI app is live with Nginx!**

---

## **ðŸ”¹ Step 12: Debugging & Logs**
If issues occur, check logs:

- **FastAPI logs**  
  ```bash
  sudo journalctl -u fastapi --no-pager --lines=50
  ```
- **Nginx logs**  
  ```bash
  sudo tail -f /var/log/nginx/error.log
  ```
- **Firewall issues**  
  ```bash
  sudo ufw status
  ```

---

## **ðŸŽ¯ Summary**
| **Step** | **Command** |
|----------|------------|
| **1. Connect to EC2** | SSH into EC2 via MobaXterm |
| **2. Install dependencies** | `sudo apt install git python3-pip python3-venv nginx -y` |
| **3. Clone project** | `git clone <repo>` |
| **4. Create Virtual Environment** | `python3 -m venv venv && source venv/bin/activate` |
| **5. Install FastAPI** | `pip install fastapi uvicorn gunicorn` |
| **6. Test FastAPI** | `uvicorn main:app --host 0.0.0.0 --port 8000 --reload` |
| **7. Create FastAPI Service** | `sudo nano /etc/systemd/system/fastapi.service` |
| **8. Configure Nginx** | `sudo nano /etc/nginx/sites-available/fastapi` |
| **9. Set Permissions** | `sudo chmod -R 755 static/ && sudo chown -R www-data:www-data static/` |
| **10. Restart Services** | `sudo systemctl restart nginx && sudo systemctl restart fastapi` |

ðŸš€ **Now, your FastAPI app is deployed successfully on AWS EC2 with Nginx!** ðŸŽ‰