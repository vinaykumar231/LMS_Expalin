Sure! Below is the **file structure** for deploying your FastAPI project on an **AWS EC2 Ubuntu server** using **systemd and Nginx**.

Key Highlights:
File Structure: Clearly defines the FastAPI project layout and relevant system files (systemd, nginx, logs).
Virtual Environment Setup: Ensures proper package management using venv.
Systemd Service Configuration: Automates FastAPI app startup and restarts.
Nginx Reverse Proxy: Correctly forwards requests to FastAPI and serves static files.
Static Files Permission Fix: Provides correct ownership and permissions for /static/.
Firewall Rules: Allows required ports for Nginx.
Testing & Logs: Includes steps to check service status and troubleshoot errors.

---

### **📌 FastAPI Project File Structure**

/home/ubuntu/your-fastapi-project/   # Main FastAPI project directory
│── venv/                            # Python virtual environment
│── main.py                          # FastAPI main application file
│── app/                             
│   ├── __init__.py                  # Makes this directory a package
│   ├── models.py                     # Database models (SQLAlchemy, Pydantic, etc.)
│   ├── routes.py                     # API endpoints
│   ├── services.py                   # Business logic
│   ├── database.py                    # Database connection
│   ├── static/                        # Static files (images, CSS, JavaScript)
│   ├── templates/                     # HTML templates (if using Jinja2)
│── requirements.txt                   # Python dependencies
│── .env                               # Environment variables
│── gunicorn_config.py                 # Gunicorn configuration (optional)
│── README.md                          # Project documentation

/etc/
│── systemd/
│   ├── system/
│       ├── fastapi.service            # systemd service file for FastAPI
│── nginx/
│   ├── sites-available/
│       ├── fastapi                     # Nginx configuration file
│   ├── sites-enabled/                   # Enabled Nginx configurations (symlink to sites-available)
│── var/
│   ├── log/
│       ├── nginx/                       # Nginx logs (access.log, error.log)


---

### **📌 Explanation of Important Files**
| **Path**                         | **Purpose** |
|----------------------------------|------------|
| `/home/ubuntu/your-fastapi-project/` | Main project directory where FastAPI app is stored. |
| `/home/ubuntu/your-fastapi-project/main.py` | Main Python script that runs FastAPI. |
| `/home/ubuntu/your-fastapi-project/app/routes.py` | Contains API routes (endpoints). |
| `/home/ubuntu/your-fastapi-project/app/models.py` | Defines database models. |
| `/home/ubuntu/your-fastapi-project/app/static/` | Stores static files (e.g., images, CSS, JavaScript). |
| `/etc/systemd/system/fastapi.service` | Systemd service file to keep FastAPI running. |
| `/etc/nginx/sites-available/fastapi` | Nginx configuration file to proxy FastAPI requests. |
| `/etc/nginx/sites-enabled/` | Symlinked configs that are active in Nginx. |
| `/var/log/nginx/` | Stores Nginx logs for debugging. |

---

### **📌 Step-by-Step Setup**
#### **1️⃣ Clone Your FastAPI Project on AWS EC2**

cd /home/ubuntu
git clone https://github.com/your-repo/your-fastapi-project.git
cd your-fastapi-project


#### **2️⃣ Create a Virtual Environment and Install Dependencies**

python3 -m venv venv
source venv/bin/activate
pip install -r requirements.txt


#### **3️⃣ Create a Systemd Service File for FastAPI**

sudo nano /etc/systemd/system/fastapi.service

📌 **Paste the following:**

[Unit]
Description=FastAPI Application
After=network.target

[Service]
User=ubuntu
WorkingDirectory=/home/ubuntu/your-fastapi-project
ExecStart=/home/ubuntu/your-fastapi-project/venv/bin/uvicorn main:app --host 127.0.0.1 --port 8000
Restart=always

[Install]
WantedBy=multi-user.target

🔹 **Save and exit** (`Ctrl + X`, then `Y`, then `Enter`).

#### **4️⃣ Start and Enable FastAPI Service**

sudo systemctl daemon-reload
sudo systemctl enable fastapi
sudo systemctl start fastapi
sudo systemctl status fastapi  # Check if running


#### **5️⃣ Install and Configure Nginx**

sudo apt update
sudo apt install nginx -y


#### **6️⃣ Configure Nginx for FastAPI**

sudo nano /etc/nginx/sites-available/fastapi

📌 **Paste the following:**
nginx
server {
    listen 80;
    server_name YOUR_DOMAIN_OR_PUBLIC_IP;

    location / {
        proxy_pass http://127.0.0.1:8000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    location /static/ {
        alias /home/ubuntu/your-fastapi-project/app/static/;
    }
}

🔹 **Save and exit** (`Ctrl + X`, then `Y`, then `Enter`).

#### **7️⃣ Enable Nginx Configuration**

sudo ln -s /etc/nginx/sites-available/fastapi /etc/nginx/sites-enabled/
sudo nginx -t  # Test for syntax errors
sudo systemctl restart nginx


#### **8️⃣ Allow Firewall Rules**

sudo ufw allow 'Nginx Full'
sudo ufw enable
sudo ufw status


---

📌 if sttaic file permsion denied tahn Change Permissions for the Static Directory

sudo chmod -R 755 /home/ubuntu/your-fastapi-project/app/static
sudo chown -R www-data:www-data /home/ubuntu/your-fastapi-project/app/static

This ensures that Nginx (running as www-data) can access the static/ folder.

### **📌 Testing**
- Visit: **`http://YOUR_DOMAIN_OR_PUBLIC_IP/`**
- Check logs:
  
  sudo journalctl -u fastapi --no-pager --since "10 minutes ago"
  sudo tail -f /var/log/nginx/access.log
  sudo tail -f /var/log/nginx/error.log
  

---

🚀 **Congratulations!** Your FastAPI app is now running with **Nginx and systemd** on **AWS EC2**! 🎉